rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() &&
        request.auth.token.email in ['tom.business.purposes@gmail.com', 'thomas.barrett.22@sandon.essex.sch.uk'];
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow read if:
      // 1. The user is accessing their own document
      // 2. The user is an admin
      // 3. The user is authenticated and the document doesn't exist yet (for initial setup)
      allow read: if isOwner(userId) || 
                    isAdmin() || 
                    (isAuthenticated() && !exists(/databases/$(database)/documents/users/$(userId)));
      
      // Allow create if:
      // 1. The user is creating their own document
      // 2. The user is an admin
      allow create: if isOwner(userId) || isAdmin();
      
      // Allow update if:
      // 1. The user is updating their own document (except admin status)
      // 2. The user is an admin (can update anything)
      allow update: if (isOwner(userId) && 
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin'])) || 
                      isAdmin();
      
      // Only admins can delete user accounts
      allow delete: if isAdmin();
    }
    
    // Products collection rules - Allow all authenticated users
    match /products/{productId} {
      allow read: if true;
      allow write: if isAuthenticated();
      
      // Allow read/write to prices subcollection
      match /prices/{priceId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }
    
    // Customers collection rules
    match /customers/{customerId} {
      allow read: if isAuthenticated() && (request.auth.uid == customerId || isAdmin());
      allow write: if isAuthenticated() && (request.auth.uid == customerId || isAdmin());
    }
    
    // Allow public read access to certain collections if needed
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 